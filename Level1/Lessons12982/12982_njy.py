# 예산
def solution(d, budget):
    # 예산의 크기가 작은순으로 정렬
    d.sort()
    # 예산의 첫번째로 합계 초기화
    sum = d[0]
    cnt = 1

    # 합계가 예산보다 작고 전체 개수보다 작은 경우
    while sum < budget and cnt < len(d):
        # 다음 예산안을 합하고 카운트 증가
        sum += d[cnt]
        cnt += 1

    # 합이 예산을 초과한 경우 -1
    if sum > budget:
        return cnt-1
    # 합과 예산이 동일한 경우 그대로 반환
    else:
        return cnt
'''
테스트 1 〉	통과 (0.00ms, 10.3MB)
테스트 2 〉	통과 (0.00ms, 10MB)
테스트 3 〉	통과 (0.00ms, 10.3MB)
테스트 4 〉	통과 (0.00ms, 10.2MB)
테스트 5 〉	통과 (0.00ms, 10.3MB)
테스트 6 〉	통과 (0.00ms, 10.3MB)
테스트 7 〉	통과 (0.03ms, 10.2MB)
테스트 8 〉	통과 (0.02ms, 10.2MB)
테스트 9 〉	통과 (0.02ms, 10.3MB)
테스트 10 〉	통과 (0.02ms, 10.2MB)
테스트 11 〉	통과 (0.02ms, 10.2MB)
테스트 12 〉	통과 (0.02ms, 10.2MB)
테스트 13 〉	통과 (0.02ms, 10.3MB)
테스트 14 〉	통과 (0.02ms, 10.2MB)
테스트 15 〉	통과 (0.03ms, 10.1MB)
테스트 16 〉	통과 (0.03ms, 10.1MB)
테스트 17 〉	통과 (0.03ms, 10.1MB)
테스트 18 〉	통과 (0.03ms, 10.2MB)
테스트 19 〉	통과 (0.03ms, 10.3MB)
테스트 20 〉	통과 (0.02ms, 10.2MB)
테스트 21 〉	통과 (0.02ms, 10.1MB)
테스트 22 〉	통과 (0.03ms, 10.1MB)
테스트 23 〉	통과 (0.02ms, 10MB)
'''